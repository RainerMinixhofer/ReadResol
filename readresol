#!/usr/bin/perl -w
#
# readresol.pl by Rainer Minixhofer
#
# Free software. Use this as you wish.
#
# Replace "# do something" with your super useful code.
#
# Use "# logEntry("log something");" to log whatever your need to see in the log.
#
use strict;
use warnings;
use POSIX;
use File::Pid;
use vars qw($ob $PortName $STALL_DEFAULT $verbose);
use Device::SerialPort;
use LWP::Simple;

# make "readresol.log" file in /var/log/ with "chown root:adm readresol"

my $daemonName    = "readresol";
#
my $dieNow        = 0;                                     # used for "infinte loop" construct - allows daemon mode to gracefully exit
my $sleepMainLoop = 120;                                    # number of seconds to wait between "do something" execution after queue is clear
my $logging       = 1;                                     # 1= logging is on
my $logFilePath   = "/var/log/";                           # log file path
my $logFile       = $logFilePath . $daemonName . ".log";
my $pidFilePath   = "/var/run/";                           # PID file path
my $pidFile       = $pidFilePath . $daemonName . ".pid";
my $homematicPath = "http://homematic.minix.local";

$PortName = "/dev/ttyUSB0";
$verbose = 1;
$STALL_DEFAULT = 20; # how many seconds to wait for new input

# daemonize
use POSIX qw(setsid);
chdir '/';
umask 0;
open STDIN,  '/dev/null'   or die "Can't read /dev/null: $!";
open STDOUT, '>>/dev/null' or die "Can't write to /dev/null: $!";
open STDERR, '>>/dev/null' or die "Can't write to /dev/null: $!";
defined( my $pid = fork ) or die "Can't fork: $!";
exit if $pid;

# dissociate this process from the controlling terminal that started it and stop being part
# of whatever process group this process was a part of.
POSIX::setsid() or die "Can't start a new session.";

# callback signal handler for signals.
$SIG{INT} = $SIG{TERM} = $SIG{HUP} = \&signalHandler;
$SIG{PIPE} = 'ignore';

# create pid file in /var/run/
my $pidfile = File::Pid->new( { file => $pidFile, } );

$pidfile->write or die "Can't write PID file, /dev/null: $!";

# turn on logging
if ($logging) {
	open LOG, ">>$logFile";
	select((select(LOG), $|=1)[0]); # make the log file "hot" - turn off buffering
}

# "infinite" loop where some useful process happens
until ($dieNow) {
	sleep($sleepMainLoop);

	$ob = Device::SerialPort->new ($PortName) || die "Can't open $PortName: $!\n";
	$ob->baudrate(9600);
	$ob->databits(8);
	$ob->parity("none");
	$ob->stopbits(1);
	$ob->handshake("none");
	$ob->read_char_time(0);     # don't wait for each character
	$ob->read_const_time(1000); # 1 second per unfulfilled "read" call
	$ob->write_settings;
	my $timeout=$STALL_DEFAULT;
	my $chars=0;
	my $buffer="";
	my $signature="";
	my @line=();
	my $count=0;
	my $saw=0;
	my $match=chr(hex("AA")).chr(hex("10")).chr(hex("00")).chr(hex("21")).chr(hex("32")).chr(hex("10")).chr(hex("00")).chr(hex("01")).chr(hex("04")).chr(hex("07"));
	while ($timeout>0) {
		($count,$saw)=$ob->read(255); # will read _up to_ 44 chars
	  if ($count > 0)
		{
			$chars+=$count;
			$buffer.=$saw;
			if ($buffer=~/($match)(.{6})(.{6})(.{6})(.{6})/)
			{
		  	$signature=$1;
		    push @line, $2;
		    push @line, $3;
		    push @line, $4;
		    push @line, $5;
		    last;
			}
	  }
	  else
		{
			$timeout--;
	  }
	}

	if ($timeout==0)
	{
		logEntry("\nWaited $STALL_DEFAULT seconds and never saw what I wanted\n");
	}
	else
	{
		if ($verbose)
		{
			for (my $i=0;$i<4;$i++)
			{
		  	my $hexstrng=$line[$i];
		    $hexstrng=~ s/(.)/sprintf("%02x ",ord($1))/eg;
		    print "$hexstrng\n";
			}
	  }
	  my $highbits1=ord(substr($line[0],4,1));my $chksum1=ord(substr($line[0],5,1));
	  my $binhighbits1=sprintf("%08s",dec2bin($highbits1));
	  if ($verbose) {printf "highbits1:%02x (%s) checksum1:%02x\n",$highbits1,$binhighbits1,$chksum1}
	  my $temp1=ord(substr($line[0],0,1))+ord(substr($line[0],1,1))*256+substr($binhighbits1,-1,1)*128;
	  if ($temp1>16383) {$temp1=-(~$temp1 & 16383)}
	  $temp1/=10;
	  my $temp2=ord(substr($line[0],2,1))+ord(substr($line[0],3,1))*256+substr($binhighbits1,-3,1)*128;
	  if ($temp2>16383) {$temp2=-(~$temp2 & 16383)}
	  $temp2/=10;
	  my $highbits2=ord(substr($line[1],4,1));my $chksum2=ord(substr($line[1],5,1));
	  my $binhighbits2=sprintf("%08s",dec2bin($highbits2));
	  if ($verbose) {printf "highbits2:%02x (%s) checksum2:%02x\n",$highbits2,$binhighbits2,$chksum2}
	  my $temp3=ord(substr($line[1],0,1))+ord(substr($line[1],1,1))*256+substr($binhighbits2,-1,1)*128;
	  if ($temp3>16383) {$temp3=-(~$temp3 & 16383)}
	  $temp3/=10;
	  my $pusp1=ord(substr($line[1],2,1));
	  my $pusp2=ord(substr($line[1],3,1));
	  my $chksum21=ord(substr($line[1],4,1));my $chksum22=ord(substr($line[1],5,1));
	  my $rflg1=ord(substr($line[2],0,1));
	  my $rflg2=ord(substr($line[2],1,1));
	  my $error=ord(substr($line[2],2,1));
	  my $unknown=ord(substr($line[2],3,1));
	  my $chksum31=ord(substr($line[2],4,1));my $chksum32=ord(substr($line[2],5,1));
	  my $rtim1=ord(substr($line[3],0,1))+ord(substr($line[3],1,1))*256;
	  my $rtim2=ord(substr($line[3],2,1))+ord(substr($line[3],3,1))*256;
	  my $chksum41=ord(substr($line[3],4,1));my $chksum42=ord(substr($line[3],5,1));
	  my $time=time; #seconds since 1970 in days.
    #Write temperatures, solar pump speed, solar valve setting, and runtimes to homematic
    my $cs = ",";
    my $hmdata = $temp1 . $cs . $temp2 . $cs . $temp3 . $cs . $pusp1 . $cs . $pusp2 . $cs . $rtim1 . $cs . $rtim2;
    my $hmiseids = "3144,3077,3145,7490,7491,7492,7493";
    my $content = get($homematicPath . "/config/xmlapi/statechange.cgi?ise_id=" . $hmiseids . "&new_value=" . $hmdata);
    die "problem setting variable Solarkollektor Temperatur" unless defined $content;
		my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
	  $mon++;
	  $year+=1900;
		if ($verbose) {
			logEntry("T1:$temp1 T2:$temp2 T3:$temp3 vP1:$pusp1 vP2:$pusp2 rf1:$rflg1 rf2:$rflg2 error:$error tp1:$rtim1 tp2:$rtim2 chksum11:$highbits1 chksum12:$chksum1 chksum21:$highbits2 chksum22:$chksum2 chksum31:$chksum31 chksum32:$chksum32 chksum41:$chksum41 chksum42:$chksum42 unknown:$unknown\n");
		}
		logEntry(sprintf("%.2d:%.2d %5.1f %5.1f %5.1f %3d %3d %3d %3d %3d %6d %6d",$hour,$min,$temp1,$temp2,$temp3,$pusp1,$pusp2,$rflg1,$rflg2,$error,$rtim1,$rtim2)."\n");
	}
	undef $ob;
}

sub dec2bin {
    my $str = unpack("B32", pack("N", shift));
    $str =~ s/^0+(?=\d)//;   # otherwise you'll get leading zeros
    return $str;
}

# add a line to the log file
sub logEntry {
	my ($logText) = @_;
	my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) = localtime(time);
	my $dateTime = sprintf "%4d-%02d-%02d %02d:%02d:%02d", $year + 1900, $mon + 1, $mday, $hour, $min, $sec;
	if ($logging) {
		print LOG "$dateTime $logText\n";
	}
}

# catch signals and end the program if one is caught.
sub signalHandler {
	$dieNow = 1;    # this will cause the "infinite loop" to exit
}

# do this stuff when exit() is called.
END {
	if ($logging) { close LOG }
	$pidfile->remove if defined $pidfile;
}
